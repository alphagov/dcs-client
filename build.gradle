buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:4.4.0'
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'nebula.ospackage'

version='0.0.1'

repositories {
    mavenCentral()
}

dependencies {
    compile(
        'io.dropwizard:dropwizard-core:1.1.0',
        'io.dropwizard:dropwizard-client:1.1.0',
        'com.nimbusds:nimbus-jose-jwt:4.0',
        'commons-codec:commons-codec:1.7'
    )
    testCompile(
        'junit:junit:4.12',
        'io.dropwizard:dropwizard-testing:1.1.0',
        'org.mockito:mockito-core:2.7.22'
    )
}

run {
    args = ["server", "configuration/dcs-client.yml"]
}

mainClassName = 'uk.gov.ida.dcsclient.DcsClientApplication'

compileTestJava {
    options.fork = true
    options.forkOptions.executable = 'javac'
    options.compilerArgs << "-XDignore.symbol.file"
}


// ----- CREATE FATJAR ---- //

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}
apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    baseName = project.name
    mergeServiceFiles()
    manifest {
        attributes(
            'Implementation-Title': 'DCS Client',
            'Implementation-Version': version,
            'Main-Class': 'uk.gov.ida.dcsclient.DcsClientApplication'
        )
    }
}

run {
    args = ["server", "configuration/dcs-client.yml"]
}

mainClassName = 'uk.gov.ida.dcsclient.DcsClientApplication'

task buildDeb(type: Deb, overwrite: true) {
    packageName = 'dcs-client'
    release = System.getenv('BUILD_NUMBER') ?: '0'

    requires('java8-runtime-headless')

    postInstall file('ospackage/debian/dcs-client.postinst')
    postUninstall file('ospackage/debian/dcs-client.postrm')

    from(shadowJar.outputs.files) {
        into '/usr/share/java'
        rename { "dcs-client-${version}.jar" }
    }
    link('/usr/share/java/dcs-client.jar', "/usr/share/java/dcs-client-${version}.jar")

    from('ospackage/debian/upstart.conf') {
        into '/etc/init'
        rename { 'dcs-client.conf' }
    }

    from('ospackage/debian/dcs-client.default') {
        into '/etc/default'
        rename { 'dcs-client' }
    }
    configurationFile('/etc/default/dcs-client')

    from('configuration/dcs-client.yml') {
        into '/etc/dcs'
    }
    configurationFile('/etc/dcs/dcs-client.yml')
}

// --------- //
